{"version":3,"sources":["components/cinema.png","components/Question.js","components/Header.js","components/Result.js","Icons.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Question","handleClick","answer","props","qAnsweredFunc","id","handleBack","backButtonFunc","handleRefresh","refreshButtonFunc","className","this","question","options","map","option","key","text","onClick","src","image","alt","icon","faArrowAltCircleLeft","style","paddingTop","size","faSync","React","Component","Header","Result","state","Activities","axios","get","questions","then","response","activities","data","highestScoringItem","setState","catch","err","console","log","activity","Alt","Description","href","Link_1","Link_2","Link_3","Icons","faStar","faCalendarAlt","faCogs","App","qAnswered","revisedQuestions","backButton","newRevisedQuestions","refreshButton","nullAnswers","remainingQuestions","filter","moment","format","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1c6f4779.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cinema.8e5e0a80.png\";","import React from \"react\";\nimport '../components/Question.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowAltCircleLeft } from '@fortawesome/free-solid-svg-icons';\nimport { faSync } from '@fortawesome/free-solid-svg-icons';\n\n\nclass Question extends React.Component {\n  handleClick = (answer) => {\n    this.props.qAnsweredFunc(this.props.id, answer);\n  };\n\n  handleBack = () => {\n    this.props.backButtonFunc(this.props.id);\n  }\n\n  handleRefresh = () => {\n    this.props.refreshButtonFunc();\n  }\n\n  render() {\n    return (\n      <div className=\"row\">\n\n        <div className=\"col-12 questionFormat\">\n          <p className=\"question\">{this.props.question}</p>\n        </div>\n\n        <div className=\"col-12\">\n          {this.props.options.map(option => {\n            return (\n              <div key={option.text} className=\"row questionRow\">\n\n                <div className=\"col-6 text-right\">\n                  <button className=\"optionButton\"\n                    onClick={() => { this.handleClick(option.text) }}>\n                    {option.text}\n                  </button>\n                </div>\n\n                <div className=\"col-6 text-left\">\n                  <img className=\"optionImage\"\n                    src={'images/' + option.image}\n                    alt=\"\"\n                  />\n                </div>\n\n              </div >\n            )\n          })}\n\n          {this.props.id > 1 &&\n            <div className=\"row\"> \n              <div className=\"col-6 backButton\">\n                <FontAwesomeIcon icon={faArrowAltCircleLeft} style={{ paddingTop: 10 }} size='3x'\n                  onClick={() => { this.handleBack() }} />\n              </div>\n\n              <div className=\"col-6 refreshButton\">\n                <FontAwesomeIcon icon={faSync} style={{ paddingTop: 10 }} size='3x'\n                  onClick={() => { this.handleRefresh() }} />\n              </div>\n            </div>\n          }\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Question;\n\n","import React from \"react\";\nimport '../components/Header.css'\n\nclass Header extends React.Component {\n    render() {\n        return (\n            <div className=\"row\" >\n                <div className=\"col-12\">\n                    <img className=\"logo img-fluid\"\n                        src=\"MakeMyDayLogoCrop.png\"\n                        alt=\"Make My Day\"\n                    />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Header;","import React from \"react\";\nimport Cinema from \"./cinema.png\";\nimport \"./Result.css\";\nimport axios from \"axios\"\n\n\nclass Result extends React.Component {\n\n  state = {\n    Activities: []\n  };\n  handleRefresh = () => {\n    this.props.refreshButtonFunc();\n  }\n\n  componentDidMount() {\n    axios.get(`https://j18snr1khd.execute-api.eu-west-1.amazonaws.com/dev/activities?Location=${this.props.questions[1].answer}&Place=${this.props.questions[0].answer}&People=${this.props.questions[2].answer}&Price=${this.props.questions[4].answer}&Activity_Level=${this.props.questions[3].answer}`).then((response) => {\n      const activities = response.data.highestScoringItem;\n      this.setState({\n        Activities: activities\n      })\n    })\n      .catch((err) => {\n        console.log(err);\n      });\n\n  }\n  render() {\n    return (\n      <div>\n        <h1>Your Activity Is...</h1><br></br>\n        <h1>{this.state.Activities.activity}</h1><br></br>\n        <div className=\"row\">\n          <div className=\"col-12 sm-6\">\n            <img src={this.state.Activities.image} Alt={this.state.Activities.activity} className=\"photo img-fluid\" />\n          </div>\n          <div className=\"col-12 sm-6\">\n            <p>{this.state.Activities.Description}</p>\n            <h3>Here are some links for your activity:</h3>\n            <p>\n              <a href={this.state.Activities.Link_1}>{this.state.Activities.Link_1}</a><br></br>\n              <a href={this.state.Activities.Link_2}>{this.state.Activities.Link_2}</a><br></br>\n              <a href={this.state.Activities.Link_3}>{this.state.Activities.Link_3}</a><br></br>\n            </p>\n          </div>\n          <div className=\"col-12 sm-12\">\n            <button className=\"backRefreshButton\"\n              onClick={() => { this.handleRefresh() }}>\n              Click to restart all questions\n              </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Result;\n\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faStar } from '@fortawesome/free-solid-svg-icons';\nimport { faCalendarAlt } from '@fortawesome/free-solid-svg-icons';\nimport { faCogs } from '@fortawesome/free-solid-svg-icons'\n\n\nclass Icons extends React.Component {\n\n    render() {\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-4\">\n                        <FontAwesomeIcon icon={faStar} size=\"3x\"/>\n                    </div>\n                    <div className=\"col-4\">\n                    <FontAwesomeIcon icon={faCalendarAlt} size=\"3x\"/>\n                    </div>\n                    <div className=\"col-4\">\n                    <FontAwesomeIcon icon={faCogs} size=\"3x\"/>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n};\n\n\nexport default Icons;","import React from 'react';\nimport 'moment-timezone';\nimport './App.css';\nimport moment from 'moment-timezone';\nimport Question from \"./components/Question.js\";\nimport Header from \"./components/Header.js\";\nimport Result from \"./components/Result.js\"\nimport Icons from './Icons';\n\n\nclass App extends React.Component {\n  state = {\n    questions: [\n      {\n        id: 1,\n        question: \"Where do you want to be?\",\n        options: [\n          {\n            text: 'Indoor',\n            image: 'indoor.png'\n          },\n          {\n            text: 'Outdoor',\n            image: 'outdoor.png'\n          }\n        ]\n      },\n\n      {\n        id: 2,\n        question: \"Which location?\",\n        options: [\n          {\n            text: 'Manchester',\n            image: 'manchester.png'\n          },\n          {\n            text: 'Liverpool',\n            image: 'liverpool.png'\n          }\n        ]\n      },\n\n      {\n        id: 3,\n        question: \"Who are you going with?\",\n        options: [\n          {\n            text: 'Alone',\n            image: 'alone.png'\n          },\n          {\n            text: 'As a Couple',\n            image: 'couple.png'\n          },\n          {\n            text: 'With Kids',\n            image: 'kids.png'\n          },\n          {\n            text: 'As a Group',\n            image: 'group.png'\n          }\n        ]\n      },\n\n      {\n        id: 4,\n        question: \"How energetic are you feeling?\",\n        options: [\n          {\n            text: 'Low Key',\n            image: 'low_key.png'\n          },\n          {\n            text: 'Quite Energetic',\n            image: 'quite_energetic.png'\n          },\n          {\n            text: 'Extremely Energetic',\n            image: 'extremely_energetic.png'\n          }\n        ]\n      },\n\n      {\n        id: 5,\n        question: \"How much do you want to spend?\",\n        options: [\n          {\n            text: 'Nothing',\n            image: 'nothing.png'\n          },\n          {\n            text: '£',\n            image: 'one_pound.png'\n          },\n          {\n            text: '££',\n            image: 'two_pound.png'\n          },\n          {\n            text: '£££',\n            image: 'three_pound.png'\n          }\n        ]\n      }\n    ],\n  };\n\n  qAnswered = (id, answer) => {\n    const revisedQuestions = this.state.questions.map(question => {\n      if (question.id === id) {\n        const updatedQ = { ...question, answer }\n        return updatedQ\n      }\n      return question\n    })\n    this.setState({\n      questions: revisedQuestions\n    })\n  }\n\n  backButton = (id) => {\n    const newRevisedQuestions = this.state.questions.map(question => {\n      if (question.id === id - 1) {\n        return { ...question, answer: null }\n      }\n      return question\n    })\n    this.setState({\n      questions: newRevisedQuestions\n    })\n  }\n\n  refreshButton = () => {\n    const nullAnswers = this.state.questions.map(question => {\n      return { ...question, answer: null }\n    })\n    this.setState({\n      questions: nullAnswers\n    })\n  }\n\n  render() {\n    const remainingQuestions = this.state.questions.filter(question => {\n      return !question.answer\n    })\n\n    return (\n      <div className=\"App\" >\n        <div className=\"container\">\n          <Header />\n          <p className=\"date\">Today is the {moment().format(\"Do-MMM-YYYY\")}</p>\n\n          {remainingQuestions.length === 0\n            ? <Result \n            refreshButtonFunc={this.refreshButton}\n            questions={this.state.questions}\n            />:\n            <div className=\"row\">\n              <div className=\"col-12\">\n                <Question\n                  question={this.state.question}\n                  options={remainingQuestions[0].options}\n                  qAnsweredFunc={this.qAnswered}\n                  backButtonFunc={this.backButton}\n                  refreshButtonFunc={this.refreshButton}\n                  id={remainingQuestions[0].id} />\n              </div>\n            </div>\n          }\n          <div className=\"row\">\n          <div className=\"col-12\" style={{paddingTop: 50}}>\n          <Icons />\n          </div>\n          </div>\n        </div>\n      </div >\n    )\n  }\n}\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}